// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _6_MoviesEntities.Contexts;

#nullable disable

namespace _6_MoviesEntities.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20241019190538_saloonupdate2")]
    partial class saloonupdate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CategoryMovie");
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Drama",
                            CreateDate = new DateTime(2024, 10, 19, 19, 5, 37, 741, DateTimeKind.Utc).AddTicks(3280),
                            Description = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Sci-Fi",
                            CreateDate = new DateTime(2024, 10, 19, 19, 5, 37, 741, DateTimeKind.Utc).AddTicks(3290),
                            Description = "Sci-Fi"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Comedy",
                            CreateDate = new DateTime(2024, 10, 19, 19, 5, 37, 741, DateTimeKind.Utc).AddTicks(3290),
                            Description = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Adventure",
                            CreateDate = new DateTime(2024, 10, 19, 19, 5, 37, 741, DateTimeKind.Utc).AddTicks(3300),
                            Description = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Crime",
                            CreateDate = new DateTime(2024, 10, 19, 19, 5, 37, 741, DateTimeKind.Utc).AddTicks(3310),
                            Description = "Crime"
                        });
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<short?>("Duration")
                        .HasColumnType("smallint");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Saloon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("Kapasite")
                        .HasColumnType("smallint");

                    b.Property<string>("SalonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 10, 19, 22, 5, 37, 744, DateTimeKind.Utc).AddTicks(410),
                            Kapasite = (short)50,
                            SalonName = "C Salonu"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 10, 19, 22, 5, 37, 744, DateTimeKind.Utc).AddTicks(480),
                            Kapasite = (short)150,
                            SalonName = "B Salonu"
                        },
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 10, 19, 22, 5, 37, 744, DateTimeKind.Utc).AddTicks(490),
                            Kapasite = (short)50,
                            SalonName = "A Salonu"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2024, 10, 19, 22, 5, 37, 744, DateTimeKind.Utc).AddTicks(500),
                            Kapasite = (short)50,
                            SalonName = "D Salonu"
                        });
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Seans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeOnly>("SeansSaati")
                        .HasMaxLength(50)
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.ToTable("Seans");
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("SaloonId")
                        .HasColumnType("int");

                    b.Property<int>("SeansId")
                        .HasColumnType("int");

                    b.Property<int>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeansId");

                    b.HasIndex("WeekId");

                    b.HasIndex("SaloonId", "SeansId", "WeekId")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Week", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("WeekName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Weeks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 10, 19, 22, 5, 37, 747, DateTimeKind.Local).AddTicks(1270),
                            EndDate = new DateOnly(2025, 8, 14),
                            StartDate = new DateOnly(2023, 8, 14),
                            WeekName = "W32"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 10, 19, 22, 5, 37, 747, DateTimeKind.Local).AddTicks(1280),
                            EndDate = new DateOnly(2025, 8, 14),
                            StartDate = new DateOnly(2023, 8, 14),
                            WeekName = "W33"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 10, 19, 22, 5, 37, 747, DateTimeKind.Local).AddTicks(1290),
                            EndDate = new DateOnly(2025, 8, 14),
                            StartDate = new DateOnly(2023, 8, 14),
                            WeekName = "W34"
                        });
                });

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.HasOne("_6_MoviesEntities.Entities.Concrete.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_6_MoviesEntities.Entities.Concrete.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Session", b =>
                {
                    b.HasOne("_6_MoviesEntities.Entities.Concrete.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_6_MoviesEntities.Entities.Concrete.Saloon", "Saloon")
                        .WithMany("Sessions")
                        .HasForeignKey("SaloonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_6_MoviesEntities.Entities.Concrete.Seans", "Seans")
                        .WithMany("Sessions")
                        .HasForeignKey("SeansId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_6_MoviesEntities.Entities.Concrete.Week", "Week")
                        .WithMany("Sessions")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Saloon");

                    b.Navigation("Seans");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Movie", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Saloon", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Seans", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("_6_MoviesEntities.Entities.Concrete.Week", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
